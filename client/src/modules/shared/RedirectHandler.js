import { useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useMySqlAuth } from '../../contexts/MySqlAuthContext';

const RedirectHandler = () => {
  const { user, loading } = useMySqlAuth();
  const navigate = useNavigate();
  const location = useLocation();

  // 游빍 MODO TESTE: Desabilitar redirecionamentos autom치ticos
  const TEST_MODE = true; // Altere para false em produ칞칚o

  useEffect(() => {
    // Se estiver em modo de teste, n칚o fazer redirecionamentos autom치ticos
    if (TEST_MODE) {
      console.log('游빍 MODO TESTE: Redirecionamentos autom치ticos desabilitados');
      console.log('游댌 Usu치rio atual:', user?.tipo, 'Rota atual:', location.pathname);
      return;
    }

    // S칩 redirecionar se n칚o estiver carregando e houver usu치rio
    if (!loading && user) {
      const currentPath = location.pathname;
      console.log('游댌 RedirectHandler: Verificando rota:', currentPath, 'Usu치rio:', user.tipo);

      // Se estiver na p치gina inicial e j치 logado, redirecionar para a 치rea correta
      if (currentPath === '/') {
        console.log('游댃 RedirectHandler: Usu치rio logado, redirecionando...', user.tipo);

        switch (user.tipo) {
          case 'empresa':
            navigate('/empresa/dashboard', { replace: true });
            break;
          case 'funcionario':
            navigate('/funcionario/agenda', { replace: true });
            break;
          case 'cliente':
            navigate('/cliente', { replace: true });
            break;
          default:
            console.warn('Tipo de usu치rio desconhecido:', user.tipo);
        }
      }
      
      // Proteger rotas por tipo de usu치rio
      if (currentPath.startsWith('/empresa/') && user.tipo !== 'empresa') {
        console.log('游뛂 Acesso negado: Usu치rio n칚o 칠 empresa');
        switch (user.tipo) {
          case 'funcionario':
            navigate('/funcionario/agenda', { replace: true });
            break;
          case 'cliente':
            navigate('/cliente', { replace: true });
            break;
          default:
            navigate('/', { replace: true });
        }
      }
      
      if (currentPath.startsWith('/funcionario/') && user.tipo !== 'funcionario') {
        console.log('游뛂 Acesso negado: Usu치rio n칚o 칠 funcion치rio');
        switch (user.tipo) {
          case 'empresa':
            navigate('/empresa/dashboard', { replace: true });
            break;
          case 'cliente':
            navigate('/cliente', { replace: true });
            break;
          default:
            navigate('/', { replace: true });
        }
      }
      
      if (currentPath.startsWith('/cliente/') && user.tipo !== 'cliente') {
        console.log('游뛂 Acesso negado: Usu치rio n칚o 칠 cliente');
        switch (user.tipo) {
          case 'empresa':
            navigate('/empresa/dashboard', { replace: true });
            break;
          case 'funcionario':
            navigate('/funcionario/agenda', { replace: true });
            break;
          default:
            navigate('/', { replace: true });
        }
      }
    }
  }, [user, loading, navigate, location.pathname]);

  // Este componente n칚o renderiza nada, s칩 faz o controle de redirecionamento
  return null;
};

export default RedirectHandler;
