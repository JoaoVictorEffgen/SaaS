version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: agendapro_postgres
    environment:
      POSTGRES_DB: saas_agendamento
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - agendapro_network
    restart: unless-stopped

  # Backend Node.js
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: agendapro_backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: saas_agendamento
      DB_USER: postgres
      DB_PASSWORD: postgres123
      JWT_SECRET: seu_jwt_secret_super_seguro_aqui
      JWT_EXPIRES_IN: 7d
      STRIPE_SECRET_KEY: sk_test_sua_chave_secreta_stripe
      STRIPE_PUBLISHABLE_KEY: pk_test_sua_chave_publica_stripe
      SENDGRID_API_KEY: sua_api_key_sendgrid
      SENDGRID_FROM_EMAIL: noreply@seudominio.com
      TWILIO_ACCOUNT_SID: sua_account_sid_twilio
      TWILIO_AUTH_TOKEN: seu_auth_token_twilio
      TWILIO_PHONE_NUMBER: whatsapp:+14155238886
      APP_URL: http://localhost:3000
      API_URL: http://localhost:5000
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    volumes:
      - ./server:/app
      - /app/node_modules
    networks:
      - agendapro_network
    restart: unless-stopped
    command: npm run dev

  # Frontend React
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: agendapro_frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      CHOKIDAR_USEPOLLING: true
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - agendapro_network
    restart: unless-stopped
    command: npm start

  # Redis para cache e sess√µes (opcional)
  redis:
    image: redis:7-alpine
    container_name: agendapro_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agendapro_network
    restart: unless-stopped

  # Nginx para proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: agendapro_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - agendapro_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  agendapro_network:
    driver: bridge 